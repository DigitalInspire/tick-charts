######################################################
# InfluxDB values.yaml (modified by Digital Inspire) #
######################################################

# this value is used in _helpers.tpl for the fullname
# fullname is used for all naming conventions of the influxdb config files
namePrefix: influxdata

## influxdb image repository and tag that is used for the Pod (i.e. docker container)
## ref: https://hub.docker.com/r/library/influxdb/tags/
image:
  repo: "influxdb"
  tag: "1.7.5"
  pullPolicy: IfNotPresent

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
resources:
  # requests = what is requested at creation time (default)
  requests:
    memory: 2Gi
    cpu: 0.3
  # limits = the resource limits for the influxdb serivce
  limits:
    memory: 8Gi
    cpu: 4

## Specify a service type
## ClusterIP is default as Ingress is used to allow for external access
## ref: http://kubernetes.io/docs/user-guide/services/
service:
  type: ClusterIP

## Create Users through Kubernetes Job
## Defaults indicated below
createUsers:
  # NOTE: It is recommended to run this job in order to
  # (at least) create an admin user if auth-enabled=true
  enabled: true
  ## Image of the container used for job
  image: appropriate/curl:latest
  ## Deadline for job so it does not retry forever.
  activeDeadline: 300
  ## Restart policy for job
  restartPolicy: OnFailure
  # The admin user that should be initially created
  adminUser:
    username: "admin"
    # admin password
    # single quotes must be escaped (\')
    password: "admin"
    # User privileges ("WITH ALL PRIVILEGES" = InfluxDB Super admin)
    # Set this to an empty string if no privileges should be set
    privileges: "WITH ALL PRIVILEGES"
  # List of users to be initially created
  # List a new user by adding username, password and privileges
  # with the schma used below
  users:
    - username: "telegrafwriter"
      password: "Telegr@fWr!ter"
      privileges: ""

## Persist data to a persistent volume
## This does not delete data after a shutdown or restart of the Pod
persistence:
  accessMode: ReadWriteOnce
  size: 16Gi #define size of volume for influxdb (Gi=Gigabyte)
  # Storage path where persistent volume (pv) is mounted on machine
  # NOTE: This folder needs to be created on the actual or storage!
  storagePath: /opt/influxdb/
  # set a node affinity for the pv and stateful set of the influxdb
  # host = hostname of machine where pv should be mounted
  # NOTE: select a node where storage capacity is available
  nodeAffinity:
    host: worker1.k8scluster.local

# Ingress Object for InfluxDB
# In short, this allows the InfluxDB being accessed from the outside world
# Also allows for SSL termination and usage of hostnames and tls/ssl certs
# If disabled, InfluxDB won't be accesible from the outside
# ref: https://kubernetes.io/docs/concepts/services-networking/ingress/ 
ingress:
  enabled: true
  # hostname is an already registered domain name that points to one of your worker nodes!
  # as ingress controller is a Deamon Set, each worker node (except master) can be used to access
  # influxdb via ingress or the specified hostname! Master does not deploy pods by default thats why.
  # You can also set the ingress controller to be deployed on the master by tainting it!
  # NOTE: if hostname is an empty string, the actual ip address of a node can be used to access influxdb
  hostname: ""
  # tls should only be used if a hostname is given!
  # if tls is enabled, ensure that a certificate for the hostname is provided under "secretName"
  tls: false
  # this attribute points to an existing K8s secret tls
  # Consult the README.md in order to see how to create a K8s Secret TLS
  secretName: my-tls-cert
  # This property indicates the path that influxdb REST API is accessible from.
  # If your hostname is "foo.com" then influxdb is accessible under http(s)://foo.com/<PATH>
  # If your path is "influxdb" then you can ping influxdb under http(s)://foo.com/influxdb/ping
  path: /influxdb
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/use-regex: "true"
    # This snippet assures that the ingress controller rewrites the path.
    # If you request influxdb under http(s)://foo.com/influxdb/ping then the
    # path is rewritten to /ping and sent to the influxdb service in order for the service
    # to understand your request (i.e. influxdb does not have a path /influxdb)
    # NOTE: The path after "rewrite" MUST equal the path property set above (i.e. ingress.path)
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite /influxdb/(.*) /$1 break;


## Change InfluxDB configuration paramaters below
## Note: Usually, K8s .yaml files use camelcase. For the influxdb config, snakecase was used
## ref: https://docs.influxdata.com/influxdb/v1.7/administration/config/
config:
  reporting_disabled: true
  storage_directory: /var/lib/influxdb
  rpc:
    bind_address: 8088
    enabled: true
  meta:
    retention_autocreate: true
    logging_enabled: true
  data:
    query_log_enabled: true
    cache_max_memory_size: 1073741824
    cache_snapshot_memory_size: 26214400
    cache_snapshot_write_cold_duration: 10m0s
    compact_full_write_cold_duration: 4h0m0s
    max_series_per_database: 1000000
    max_values_per_tag: 100000
    trace_logging_enabled: false
    compact_throughput: 50331648
    compact_throughput_burst: 50331648
  coordinator:
    write_timeout: 10s
    max_concurrent_queries: 0
    query_timeout: 0s
    log_queries_after: 0s
    max_select_point: 0
    max_select_series: 0
    max_select_buckets: 0
  retention:
    enabled: true
    check_interval: 30m0s
  shard_precreation:
    enabled: true
    check_interval: 10m0s
    advance_period: 30m0s
  monitor:
    store_enabled: true
    store_database: _internal
    store_interval: 10s
  subscriber:
    enabled: true
    http_timeout: 30s
    insecure_skip_verify: false
    ca_certs: ""
    write_concurrency: 40
    write_buffer_size: 1000
  http:
    enabled: true
    bind_address: 8086
    auth_enabled: true
    log_enabled: true
    access_log_path: /influxdata/logs/http_requests.log
    write_tracing: true
    pprof_enabled: true
    # https and cert files should be set to false/empty respectively
    # if ingress is used as ingress does SSL termination for influxdb
    https_enabled: false
    https_certificate: ""
    https_private_key: ""
    max_row_limit: 1000000
    max_connection_limit: 500
    max_concurrent_write_limit: 0
    max_enqueued_write_limit: 0
    enqueued_write_timeout: 0
    shared_secret: ""
    realm: InfluxDB
    unix_socket_enabled: false
    bind_socket: /var/run/influxdb.sock
    flux_enabled: true
  logging:
    format: logfmt
    level: error
  continuous_queries:
    log_enabled: true
    enabled: true
    run_interval: 1s


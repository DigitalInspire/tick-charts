######################################################
# Telegraf values.yaml (modified by Digital Inspire) #
######################################################

# this value is used in _helpers.tpl for the fullname
# fullname is used for all naming conventions of the Telegraf config files
namePrefix: influxdata

## Default values.yaml for Telegraf
## This is a YAML-formatted file.
## ref: https://hub.docker.com/r/library/telegraf/tags/
image:
  repo: "telegraf"
  tag: "1.10.4"
  pullPolicy: IfNotPresent

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
resources:
  requests:
    memory: 256Mi
    cpu: 0.1
  limits:
    memory: 3Gi
    cpu: 2

## Configure the service for this telegraf instance. If you are running
## Any of the service plugins you will need this enabled
## Service Plugins: http_listener, statsd, tcp_listener, udp_listener
## ref: http://kubernetes.io/docs/user-guide/services/
service:
  enabled: true
  type: ClusterIP
## NOTE2: socket_listener is exposed over LoadBalancer as ingress does not support TCP/UDP
## Specify the desired port under service.socket_listener.nodePort
  external:
    # Note: If the custom Telegraf TCP Proxy (with authentication) is used in K8s, then
    # this property needs to be set to false (i.e. enabled=false).
    enabled: true
    socket_listener:
      type: LoadBalancer
      nodePort: 30094 # this port is exposed to the outside world
      servicePort: 8094 # has to equal port that is specified in configuration

# Ingress Object for Telegraf
# In short, this allows the Telegraf being accessed from the outside world
# Also allows for SSL termination and usage of hostnames and tls/ssl certs
# If disabled, Telegraf (HTTP/S) won't be accesible from the outside
# ref: https://kubernetes.io/docs/concepts/services-networking/ingress/ 
ingress:
  enabled: true
  # hostname is an already registered domain name that points to one of your worker nodes!
  # as ingress controller is a Deamon Set, each worker node (except master) can be used to access
  # telegraf via ingress or the specified hostname! Master does not deploy pods by default thats why.
  # You can also set the ingress controller to be deployed on the master by tainting it!
  # NOTE: if hostname is an empty string, the actual ip address of a node can be used to access telegraf
  hostname: ""
  # tls should only be used if a hostname is given!
  # if tls is enabled, ensure that a certificate for the hostname is provided under "secretName"
  tls: false
  # this attribute points to an existing K8s secret tls
  # Consult the README.md in order to see how to create a K8s Secret TLS
  secretName: my-tls-cert
  # This property indicates the path that telegraf REST API is accessible from.
  # If your hostname is "foo.com" then telegraf is accessible under http(s)://foo.com/<PATH>
  # If your path is "telegraf" then you can ping telegraf under http(s)://foo.com/telegraf/ping
  path: /telegraf
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/use-regex: "true"
    # This snippet assures that the ingress controller rewrites the path.
    # If you request telegraf under http(s)://foo.com/telegraf/ping then the
    # path is rewritten to /ping and sent to the telegraf service in order for the service
    # to understand your request (i.e. telegraf does not have a path /telegraf)
    # NOTE: The path after "rewrite" MUST equal the path property set above (i.e. ingress.path)
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite /telegraf/(.*) /$1 break;

## Exposed telegraf configuration
## For full list of possible values see:
## ref: https://github.com/influxdata/telegraf/blob/master/etc/telegraf.conf
config:
  agent:
    interval: "7s"
    round_interval: true
    metric_batch_size: 1000
    metric_buffer_limit: 10000
    collection_jitter: "0s"
    flush_interval: "10s"
    flush_jitter: "0s"
    precision: ""
    # Run telegraf with debug log messages.
    debug: false
    # Run telegraf in quiet mode (error log messages only).
    quiet: false
    # Specify the log file name. The empty string means to log to stderr.
    # DO NOT CHANGE THIS AS containers should log to stderr by design/default!
    logfile: ""
    hostname: "telegraf"
    # If set to true, the tag "host" will not be added to the data when ingested
    # If set to false, the tag "host" will be added to the ingested data with value
    # from hostname or, by default, from os.Hostname()
    omit_hostname: true
###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################
# CPU and System is required for chronograf
# This may show errors in the logs, but this does not affect performance or functionality
  inputs:
    # Telegraf InfluxDB Listener is the input plugin that acts as a proxy
    # for the InfluxDB /write REST API. 
    # This port is exposed through the ingress controller!
    - influxdb_listener:
        service_address: ":8186"
        read_timeout: "10s"
        write_timeout: "10s"
        max_body_size: 0
        max_line_size: 0
        # basic username and password needs to be used by a client
        # that wants to ingest data over HTTP.
        basic_username: "http_ingest"
        basic_password: "!nge$tOverHTTP"
    - socket_listener:
        service_address: "tcp://:8094"
        max_connections: 0
        read_timeout: "30s"
        data_format: "influx"

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################
  outputs:
    # This is one static routing configuration that routes data according to the
    # tagpass property and excludes it afterwards.
    # NOTE: If you want to add static routing to telegraf for a new database,
    # copy this example configuration array and append it to the outputs property.
    # Then, adapt the database and tagpass[0].value property to the desired database
    - influxdb:
        url: "http://influxdata-influxdb:8086"
        # The database this static routing configuration is writing to
        database: "test"
        # HTTP basic auth with the username and password that should exist in influxdb
        # for telegraf to write to ALL db's (new creation of db means telegraf user needs
        # to be added to the privileges)
        # NOTE: Check the influxdb Helm Chart values.yaml file and if a user for telegraf
        # is created. If not, create one and use the same credentials here!
        # NOTE2: The user needs write permissions for the specified database!
        username: "telegrafwriter"
        password: "Telegr@fWr!ter"
        skip_database_creation: true
        # Tagpass Array
        tagpass:
          # This tagpass only allows data into the database "test" where the
          # data has a tag "db" with the value "test"
          - tag: "db"
            value: "test"
        # The tag(s) this static routing configuration should exclude after routing is done
        tagexclude: 
          - "db"


    # NOTE: This approach uses a dynamic routing of data into the appropriate database
    # based on the database_tag. The disadvantage is, that the used tag for routing 
    # cannot be deleted and is also stored in the influxdb
    # NOTE: If you want to use dynamic routing (this one), delete all static routing
    # configurations that are present (or comment them out)
    # ref: https://github.com/influxdata/telegraf/pull/5490#issuecomment-468068149
##    - influxdb:
##        url: "http://influxdata-influxdb:8086"
##        # This determines which tag in the LineProtocol defines the destination database
##        # default is "db" (i.e. the value of the "db" tag determines in which database
##        # data is written to!
##        database_tag: "db"
##        # HTTP basic auth with the username and password that should exist in influxdb
##        # for telegraf to write to ALL db's (new creation of db means telegraf user needs
##        # to be added to the privileges)
##        # NOTE: Check the influxdb Helm Chart values.yaml file and if a user for telegraf
##        # is created. If not, create one and use the same credentials here!
##        # NOTE2: The user needs write permissions for the specified database!
##        username: "telegrafwriter"
##        password: "Telegr@fWr!ter"
##        # If the telegrafwriter has no super admin permissions, set this to true!
##        # NOTE: Best practices would be to set this to true, as the telegrafwriter
##        # should not be able to create new databases (could be exploited by attackers)
##        skip_database_creation: true
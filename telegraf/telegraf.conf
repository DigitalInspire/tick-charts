# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply prepend
# them with $. For strings the variable must be within quotes (ie, "$STR_VAR"),
# for numbers and booleans they should be plain (ie, $INT_VAR, $BOOL_VAR)


# Global tags can be specified here in key="value" format.
# [global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"


# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "7s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
  ## output, and will flush this buffer on a successful write. Oldest metrics
  ## are dropped first when this buffer fills.
  ## This buffer only fills when writes fail to output plugin(s).
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Logging configuration:
  ## Run telegraf with debug log messages.
  debug = false
  ## Run telegraf in quiet mode (error log messages only).
  quiet = false
  ## Specify the log file name. The empty string means to log to stderr.
  logfile = "/var/log/telegraf/telegraf.log"

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = true


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

## Optional TLS Config for use on HTTP connections.
# tls_ca = "/etc/telegraf/ca.pem"
#tls_cert = "/etc/ssl/influxdb-selfsigned.crt"
#tls_key = "/etc/ssl/influxdb-selfsigned.key"

## Use TLS but skip chain & host verification
# insecure_skip_verify = false

# OUTPUT InfluxDB - Voecklabruck
[[outputs.influxdb]]
  url = "https://infracenter.digitalinspire.services:8086"
  insecure_skip_verify = true
  database = "voecklabruck"
  tagexclude = ["db"]
# HTTP Basic Auth
  username = "telegrafwriter"
  password = "Telegr@fWr!ter"
## If true, no CREATE DATABASE queries will be sent.  Set to true when using
## Telegraf with a user without permissions to create databases or when the
## database already exists.
  skip_database_creation = true
# Only allow data to this output if condition is true
  [outputs.influxdb.tagpass]
    db = ["voecklabruck"]


# OUTPUT InfluxDB - Wernstein
[[outputs.influxdb]]
  url = "https://infracenter.digitalinspire.services:8086"
  insecure_skip_verify = true
  database = "wernstein"
  tagexclude = ["db"]
# HTTP Basic Auth
  username = "telegrafwriter"
  password = "Telegr@fWr!ter"
## If true, no CREATE DATABASE queries will be sent.  Set to true when using
## Telegraf with a user without permissions to create databases or when the
## database already exists.
  skip_database_creation = true
# Only allow data to this output if condition is true
  [outputs.influxdb.tagpass]
    db = ["wernstein"]


# OUTPUT InfluxDB - Stadlau
[[outputs.influxdb]]
  url = "https://infracenter.digitalinspire.services:8086"
  insecure_skip_verify= true
  database = "stadlau"
  tagexclude = ["db"]
# HTTP Basic Auth
  username = "telegrafwriter"
  password = "Telegr@fWr!ter"
## If true, no CREATE DATABASE queries will be sent.  Set to true when using
## Telegraf with a user without permissions to create databases or when the
## database already exists.
  skip_database_creation = true
# Only allow data to this output if condition is true
  [outputs.influxdb.tagpass]
    db = ["stadlau"]


# OUTPUT InfluxDB - Test
# Use this database for all testing purposes (create new measurements inside)
[[outputs.influxdb]]
  url = "https://infracenter.digitalinspire.services:8086"
  insecure_skip_verify= true
  database = "test"
  tagexclude = ["db"]
# HTTP Basic Auth
  username = "telegrafwriter"
  password = "Telegr@fWr!ter"
## If true, no CREATE DATABASE queries will be sent.  Set to true when using
## Telegraf with a user without permissions to create databases or when the
## database already exists.
  skip_database_creation = true
# Only allow data to this output if condition is true
  [outputs.influxdb.tagpass]
    db = ["test"]
  

# OUTPUT InfluxDB - Test
# Use this database for all testing purposes (create new measurements inside)
[[outputs.influxdb]]
  url = "https://infracenter.digitalinspire.services:8086"
  insecure_skip_verify= true
  database = "sensordata_test"
  tagexclude = ["db"]
# HTTP Basic Auth
  username = "telegrafwriter"
  password = "Telegr@fWr!ter"
## If true, no CREATE DATABASE queries will be sent.  Set to true when using
## Telegraf with a user without permissions to create databases or when the
## database already exists.
  skip_database_creation = true
# Only allow data to this output if condition is true
  [outputs.influxdb.tagpass]
    db = ["sensordata_test"]

# OUTPUT InfluxDB - Admin_Test - for frontend application
# # Use this database for all testing purposes (create new measurements inside)
[[outputs.influxdb]]
  url = "https://infracenter.digitalinspire.services:8086"
  insecure_skip_verify= true
  database = "admin_test"
  tagexclude = ["db"]
# HTTP Basic Auth
  username = "telegrafwriter"
  password = "Telegr@fWr!ter"
# OUTPUT InfluxDB - test_size - for proxy testing of db sizes
# # # Use this database for all testing purposes (create new measurements inside)
[[outputs.influxdb]]
  url = "https://infracenter.digitalinspire.services:8086"
  insecure_skip_verify= true
  database = "test_size"
  tagexclude = ["db"]
# HTTP Basic Auth
  username = "telegrafwriter"
  password = "Telegr@fWr!ter"
## If true, no CREATE DATABASE queries will be sent.  Set to true when using
## Telegraf with a user without permissions to create databases or when the
## database already exists.
  skip_database_creation = true
# Only allow data to this output if condition is true
  [outputs.influxdb.tagpass]
    db = ["test_size"]

###############################################################################
#                            SERVICE INPUT PLUGINS                            #
###############################################################################

# # Generic HTTP write listener
[[inputs.http_listener]]
#   ## Address and port to host HTTP listener on
    service_address = ":8186"
#
#   ## maximum duration before timing out read of the request
#   # read_timeout = "10s"
#   ## maximum duration before timing out write of the response
#   # write_timeout = "10s"
#
#   ## Maximum allowed http request body size in bytes.
#   ## 0 means to use the default of 536,870,912 bytes (500 mebibytes)
#   # max_body_size = 0
#
#   ## Set one or more allowed client CA certificate file names to
#   ## enable mutually authenticated TLS connections
    #tls_allowed_cacerts = ["/etc/telegraf/certs/infracenter.digitalinspire.services.crt"]
#
#   ## Add service certificate and key
    tls_cert = "/etc/telegraf/certs/infracenter.digitalinspire.services.crt"
    tls_key  = "/etc/telegraf/private/infracenter.digitalinspire.services_SSL_private.key"
#
#   ## Optional username and password to accept for HTTP basic authentication.
#   ## You probably want to make sure you have TLS configured above for this.
    basic_username = "http_ingest"
    basic_password = "ingest2019!$"
#
#   ## Data format to consume.
#   ## Each data format has its own unique set of configuration options, read
#   ## more about them here:
#   ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md




# # Generic socket listener capable of handling multiple socket types.
[[inputs.socket_listener]]
#   ## URL to listen on
    service_address = "tcp://:8094"
#   # service_address = "tcp://127.0.0.1:http"
    # service_address = "tcp4://:8094"
    # service_address = "tcp6://:8094"
#   # service_address = "tcp6://[2001:db8::1]:8094"
#   # service_address = "udp://:8094"
#   # service_address = "udp4://:8094"
#   # service_address = "udp6://:8094"
#   # service_address = "unix:///tmp/telegraf.sock"
#   # service_address = "unixgram:///tmp/telegraf.sock"
#
#   ## Maximum number of concurrent connections.
#   ## Only applies to stream sockets (e.g. TCP).
#   ## 0 (default) is unlimited.
    max_connections = 0
#
#   ## Read timeout.
#   ## Only applies to stream sockets (e.g. TCP).
#   ## 0 (default) is unlimited.
    read_timeout = "30s"
#
#   ## Optional TLS configuration.
#   ## Only applies to stream sockets (e.g. TCP).
  #  tls_cert = "/etc/telegraf/certs/infracenter.digitalinspire.services.crt"
  #  tls_key  = "/etc/telegraf/private/infracenter.digitalinspire.services.key"
#   ## Enables client authentication if set.
    #tls_allowed_cacerts = ["/etc/telegraf/newcerts/infracenter.digitalinspire.services01.pem"]
#
#   ## Maximum socket buffer size in bytes.
#   ## For stream sockets, once the buffer fills up, the sender will start backing up.
#   ## For datagram sockets, once the buffer fills up, metrics will start dropping.
#   ## Defaults to the OS default.
#   # read_buffer_size = 65535
#
#   ## Period between keep alive probes.
#   ## Only applies to TCP sockets.
#   ## 0 disables keep alive probes.
#   ## Defaults to the OS configuration.
#   # keep_alive_period = "5m"
#
#   ## Data format to consume.
#   ## Each data format has its own unique set of configuration options, read
#   ## more about them here:
#   ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
    data_format = "influx"

